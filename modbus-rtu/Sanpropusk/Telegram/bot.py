import json
import os
import requests

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

from utils.overall_work import logger


# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
TELEGRAM_TOKEN = "7902002433:AAHmrHoBriL8dRcskrJtzQPDXwag7OQd4Fs"

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
STATE_FILE = os.path.join(SCRIPT_DIR, "states.json")
SUBSCRIBERS_FILE = os.path.join(SCRIPT_DIR, "subscribers.json")


# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
def load_json(path, default):
    if os.path.exists(path):
        with open(path, "r") as f:
            return json.load(f)
    return default


def save_json(path, data):
    with open(path, "w") as f:
        json.dump(data, f)


# === Telegram –ª–æ–≥–∏–∫–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    subscribers = load_json(SUBSCRIBERS_FILE, [])
    if chat_id not in subscribers:
        subscribers.append(chat_id)
        save_json(SUBSCRIBERS_FILE, subscribers)
        await update.message.reply_text(
            "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∫–æ–≤."
        )
        logger.info(
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∫–æ–≤."
        )
    else:
        await update.message.reply_text("üîî –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")


def send_telegram_message_to_all(text):
    subscribers = load_json(SUBSCRIBERS_FILE, [])
    for chat_id in subscribers:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": text}
        try:
            requests.post(url, data=payload)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")


# === –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
def parse_payload(payloads, states):
    slave_id = payloads.get("slave_id")
    data = payloads.get("data", {})
    state_value = data.get("R513")
    if state_value is None:
        return  # –µ—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    if slave_id == 16:
        check_state("MC01", state_value, states)
    elif slave_id == 17:
        check_state("MC02", state_value, states)


def check_state(mc_name, current_state, states):
    prev_state = states.get(mc_name)
    if prev_state != current_state:
        states[mc_name] = current_state
        if int(current_state) == 0:
            send_telegram_message_to_all(f"{mc_name}:  ‚ùó –ë–∞–∫ –ø—É—Å—Ç–æ–π")
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {mc_name}:  ‚ùó –ë–∞–∫ –ø—É—Å—Ç–æ–π")
        elif int(current_state) == 1:
            send_telegram_message_to_all(f"{mc_name}:  ‚úÖ –ë–∞–∫ –Ω–∞–ø–æ–ª–Ω–µ–Ω")
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {mc_name}:  ‚úÖ –ë–∞–∫ –Ω–∞–ø–æ–ª–Ω–µ–Ω")


def monitoring_tank_tg(payloads):
    states = load_json(STATE_FILE, {"MC01": None, "MC02": None})
    parse_payload(payloads, states)
    save_json(STATE_FILE, states)


# === –°—Ç–∞—Ä—Ç Telegram-–±–æ—Ç–∞ ===
def bot_start():
    logger.info("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.run_polling()


if __name__ == "__main__":
    bot_start()
